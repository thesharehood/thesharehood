<?php

/*
These session variables and cookies are used to track the all important location data:

      $_SESSION['sharehood_location_data'];
      $_SESSION['sharehood_location_data']['sharehood_postal_code'];
      $_SESSION['sharehood_location_data']['sharehood_country'];
      $_SESSION['sharehood_location_data']['sharehood_latitude'];
      $_SESSION['sharehood_location_data']['sharehood_longitude'];
      $_COOKIE['Drupal_visitor_sharehood_postal_code'];
      $_COOKIE['Drupal_visitor_sharehood_country'];
      $_COOKIE['Drupal_visitor_sharehood_latitude'];
      $_COOKIE['Drupal_visitor_sharehood_longitude'];
*/


function sharehood_init() {
  // check to see if our sharehood cookie exists and use it to set session variables
  if(isset($_COOKIE['Drupal_visitor_sharehood_postal_code'])) {
    $_SESSION['sharehood_location_data'] = array(
        'sharehood_postal_code'=>$_COOKIE['Drupal_visitor_sharehood_postal_code'],
        'sharehood_country'=>$_COOKIE['Drupal_visitor_sharehood_country'],
        'sharehood_latitude'=>$_COOKIE['Drupal_visitor_sharehood_latitude'],
        'sharehood_longitude'=>$_COOKIE['Drupal_visitor_sharehood_longitude']
        );
  }
}

/**
 *Implements hook_form_alter

 Hide the various fields we don't want to show on the various forms...
 location_node_form, search_block_form, search_form, shareable_node_form, community_post_node_form, mailchimp_lists_user_subscribe_form_sharehood_newsletter
*/
function sharehood_form_alter(&$form, $form_state, $form_id) {
  //dpm($form);

  if ($form_id === 'location_node_form') {
    //dpm($_SESSION['sharehood_location_data']);
    //turn title off but set a value as its required
    $form['title']['#access'] = FALSE;
    $form['title']['#value'] = "Sharehood location node";
    // turn street etc off - leave only postcode and country
    $form['field_address']['und'][0]['street_block']['#access'] = FALSE;
    $form['field_address']['und'][0]['locality_block']['locality']['#access'] = FALSE;
    $form['field_address']['und'][0]['locality_block']['administrative_area']['#access'] = FALSE;
    // check if session variables set and preset form if so:
    if(isset($_SESSION['sharehood_location_data'])) {
      $form['field_address']['und'][0]['#address']['postal_code'] = $_SESSION['sharehood_location_data']['sharehood_postal_code'];
      $form['field_address']['und'][0]['#address']['country'] = $_SESSION['sharehood_location_data']['sharehood_country'];
    }
  } elseif ($form_id === 'mailchimp_lists_user_subscribe_form_sharehood_newsletter') {
    // remove first and last name fields
    $form['mailchimp_lists']['mailchimp_sharehood_newsletter']['mergevars']['FNAME']['#access'] = FALSE;
    $form['mailchimp_lists']['mailchimp_sharehood_newsletter']['mergevars']['LNAME']['#access'] = FALSE;
  } elseif ($form_id === 'shareable_node_form') {
    $form['field_expiry_date_timestamp']['#access'] = FALSE;
  }
}

// validate stuff after form submission but before saving...
function sharehood_node_validate($node, $form, &$form_state) {
  if($node->type == 'shareable' || $node->type == 'community-post') {
    if(!isset($_SESSION['sharehood_location_data'])) {
      // this needs a field type (or something) in the first parameter
      form_set_error('field_your_first_name', 'You MUST set your postcode and country below before posting a shareable or a community post.');
    }
  } elseif ($node->type == 'location') {
    // we can't make the entire address field required because we only want part of it!
    if($node->field_address['und'][0]['postal_code'] == "") {
      form_set_error('field_address','Postal/Zip code is required.');
    }
    // but it's impossible not to set a country
  }

}

function sharehood_node_presave($node) {
  //dpm($node);

  if($node->type == 'location') {
    // ALWAYS set session variables
    //if(!isset($_SESSION['sharehood_location_data'])) {
      $_SESSION['sharehood_location_data'] = array(
        'sharehood_postal_code'=>$node->field_address['und'][0]['postal_code'],
        'sharehood_country'=>$node->field_address['und'][0]['country'],
        'sharehood_latitude'=>$node->field_coordinates['und'][0]['lat'],
        'sharehood_longitude'=>$node->field_coordinates['und'][0]['lon']
        );
      dpm($_SESSION);
    //}
    if($node->field_remember_me['und'][0]['value'] == TRUE) {
      //set cookie
      user_cookie_save(array(
        'sharehood_postal_code'=>$node->field_address['und'][0]['postal_code'],
        'sharehood_country'=>$node->field_address['und'][0]['country'],
        'sharehood_latitude'=>$node->field_coordinates['und'][0]['lat'],
        'sharehood_longitude'=>$node->field_coordinates['und'][0]['lon']
        ));
    }
  }

  if($node->type == 'shareable') {

   // set expiry date
   $now = time();
   switch ($node->field_expiry_date['und'][0]['value']) {
    case 'five-years':
    $node->field_expiry_date_timestamp['und'][0] = array('value'=>(157680000+$now));
    break;
    case 'two-years':
    $node->field_expiry_date_timestamp['und'][0] = array('value'=>(63072000+$now));
    break;
    case 'one-year':
    $node->field_expiry_date_timestamp['und'][0] = array('value'=>(31536000+$now));
    break;
    case 'six-months':
    $node->field_expiry_date_timestamp['und'][0] = array('value'=>(15768000+$now));
    break;
    case 'two-months':
    $node->field_expiry_date_timestamp['und'][0] = array('value'=>(5256000+$now));
    break;
    case 'one-month':
    $node->field_expiry_date_timestamp['und'][0] = array('value'=>(2628000+$now));
    break;
   }
  }

  if($node->type == 'shareable' || $node->type == 'community-post') {
    //check if user exists - create if not, set uid if so
    $result = db_query('SELECT u.mail, u.uid FROM {users} u WHERE u.mail = :mail', array(':mail' => $node->field_email_address['und'][0]['value']));
    if($result->rowCount()){
      // the user exists!
      $record = $result->fetchObject();
      //set the uid of the node
      $node->uid = $record->uid;
      // should load user data and see if country/postcode has changed!? and then save the user data
      //$user = user_load($record->uid);
      //dpm($user);
    } else {
      // fuck directly with database to create a user!!!
      dpm($_SESSION['sharehood_location_data']);
      //$account->is_new = TRUE;
      $email = $node->field_email_address['und'][0]['value'];
      require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
      $success1 = db_insert('users')
        ->fields(array(
          'name' => $email,
          'pass' => user_hash_password(trim('sdhs56-SD34dfgFsdfjksdan4376345REFSDG')),
          'mail' => $email, 
          'created' => time(), 
          //'timezone' => WHAT,
          'init' => $email,
          'signature_format' => 'filtered_html',
          'status' => 1
            ))->execute();
      // get new uid
      $newuid = db_query('SELECT MAX(uid) FROM {users}')->fetchField();
      // set contact form to on
      //set country and postcode of user
      $shpc = $_SESSION['sharehood_location_data']['sharehood_postal_code'];
      $shc = $_SESSION['sharehood_location_data']['sharehood_country'];
      $success2 = db_insert('field_data_field_address')
        ->fields(array(
          'entity_type' => 'user',
          'bundle' => 'user',
          'entity_id' => $newuid,
          'revision_id' => $newuid,
          'language' => 'und',
          'delta' => 0,
          'field_address_country' => $shc,
          'field_address_postal_code' => $shpc
            ))->execute();
      $success3 = db_insert('field_revision_field_address')
        ->fields(array(
          'entity_type' => 'user',
          'bundle' => 'user',
          'entity_id' => $newuid,
          'revision_id' => $newuid,
          'language' => 'und',
          'delta' => 0,
          'field_address_country' => $shc,
          'field_address_postal_code' => $shpc
            ))->execute();
      // and lat and long  
      $shlat = $_SESSION['sharehood_location_data']['sharehood_latitude'];
      $shlong = $_SESSION['sharehood_location_data']['sharehood_longitude'];
      $success4 = db_insert('field_data_field_coordinates')
        ->fields(array(
          'entity_type' => 'user',
          'bundle' => 'user',
          'entity_id' => $newuid,
          'revision_id' => $newuid,
          'language' => 'und',
          'delta' => 0,
          'field_coordinates_wkt' => "POINT ($shlong $shlat)",
          'field_coordinates_geo_type' => 'point',
          'field_coordinates_lat' => $shlat,
          'field_coordinates_lon' => $shlong,
          'field_coordinates_left' => $shlong,
          'field_coordinates_top' => $shlat,
          'field_coordinates_right' => $shlong,
          'field_coordinates_bottom' => $shlat,
          'field_coordinates_srid' => NULL
            ))->execute();
      $success5 = db_insert('field_revision_field_coordinates')
        ->fields(array(
          'entity_type' => 'user',
          'bundle' => 'user',
          'entity_id' => $newuid,
          'revision_id' => $newuid,
          'language' => 'und',
          'delta' => 0,
          'field_coordinates_wkt' => "POINT ($shlong $shlat)",
          'field_coordinates_geo_type' => 'point',
          'field_coordinates_lat' => $shlat,
          'field_coordinates_lon' => $shlong,
          'field_coordinates_left' => $shlong,
          'field_coordinates_top' => $shlat,
          'field_coordinates_right' => $shlong,
          'field_coordinates_bottom' => $shlat,
          'field_coordinates_srid' => NULL
            ))->execute();
      //$user = user_save($account, $edit);
      $node->uid = $newuid;
      dpm($success1);
      dpm($success2);
      dpm($success3);
      dpm($success4);
      dpm($success5);
      // then we have to set up content subscriptions
    }

  }

  return $node;
}



?>
